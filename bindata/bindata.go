// Package bindata provides ways of storing static files within an executable.
// There is a packaging mechanism and a virtual filesystem that provides access
// to those files.
package bindata

import (
	"os"
	"path/filepath"
	"strings"
	"time"

	"ktkr.us/pkg/vfs"
)

var (
	root        *dir
	startupTime = time.Now()

	// Root is the root of the embedded virtual filesystem. It is nil unless at
	// least one file has been successfully registered using RegisterFile.
	Root vfs.FileSystem
)

// RegisterFile assigns a data blob to a path in the in-memory filesystem. It
// is used in the files generated by the bindata utility.
func RegisterFile(path string, mod time.Time, data []byte) {
	path = filepath.Clean(path)
	if len(path) == 0 || path == ".." || path == "." {
		return
	}
	components := strings.Split(path, string([]rune{os.PathSeparator}))
	if root == nil {
		root = &dir{name: "/"}
		Root = root
	}
	current := root

	for i, c := range components {
		if i < len(components)-1 {
			// is a directory
			if current.dirs == nil {
				current.dirs = make(map[string]*dir)
			}
			if existingDir, ok := current.dirs[c]; ok {
				current = existingDir
			} else {
				newDir := &dir{name: c}
				current.dirs[c] = newDir
				current = newDir
			}
		} else {
			// is a file
			if current.files == nil {
				current.files = make(map[string]*file)
			}
			current.files[c] = &file{
				name: c,
				mod:  mod,
				data: data,
			}
		}
	}
}
